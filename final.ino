#include<Wire.h>
#include<SoftwareSerial.h>
#include <Arduino.h>
#include "Talkie.h"

const int8_t Vo_Call[] PROGMEM = {
  0xa0, 0xaa, 0xb8, 0xa8, 0xd4, 0x42, 0xae, 0x0, 0x4a, 0xb, 0x5f, 0x7a, 0x88, 0x66, 0x62, 0x92, 0xfa, 0xe8, 0xc9, 0x7b, 0x99, 0x51, 0x9c, 0xa3, 0x45, 0xe5, 0x95, 0x4e, 0x71, 0x96, 0x22, 0x5d, 0x75, 0x1b, 0xc4, 0x5e, 0x32, 0xb3, 0xdd, 0x69, 0x18, 0x7b, 0x49, 0x9e, 0xc7, 0x94, 0xb3, 0xdd, 0xc3, 0x66, 0xa2, 0x33, 0x21, 0x71, 0xf, 0x93, 0x88, 0xcc, 0x16, 0x27, 0x5d, 0x5c, 0x60, 0x36, 0xe3, 0x9c, 0x34, 0x48, 0x30, 0x4f, 0x87, 0x44, 0x1d, 0xa3, 0x4, 0x61, 0x1e, 0xe1, 0xa9, 0x1b, 0x1b, 0x94, 0x57, 0x85, 0x38, 0x3a, 0x7c, 0xb4, 0x3e, 0x53, 0x14, 0xe7, 0x8, 0xd9, 0x5a, 0x67, 0x91, 0xd3, 0x23, 0x26, 0x6b, 0x15, 0x4d, 0x76, 0x9b, 0x62, 0x5c, 0x74, 0x34, 0xda, 0x36, 0xa, 0xd, 0xba, 0x1e, 0x51, 0x67, 0xd1, 0xd1, 0x58, 0x45, 0x91, 0xdd, 0x43, 0x25, 0x17, 0xe5, 0xc5, 0x4e, 0xf, 0x91, 0x42, 0xa5, 0x15, 0x27, 0x39, 0x78, 0xac, 0xe1, 0x51, 0xdc, 0x64, 0xe1, 0x61, 0x51, 0x54, 0x68, 0x92, 0x84, 0x87, 0x2a, 0x5c, 0xed, 0xf1, 0x12, 0x66, 0x9a, 0x5a, 0x8d, 0xd7, 0x1d, 0x98, 0x59, 0x1c, 0x5d, 0x34, 0x67, 0x60, 0xaa, 0x5b, 0x76, 0xd2, 0x3a, 0x47, 0xb0, 0xde, 0xe1, 0xad, 0x49, 0x8, 0x1e, 0xad, 0xbb, 0xb9, 0xc7, 0x76, 0x44, 0xd1, 0x61, 0xc1, 0x1a, 0x87, 0x0, 0x5d, 0x9a, 0x2f, 0x4c, 0xe6, 0xae, 0xc, 0x5a, 0x77, 0x30, 0x6b, 0xbb, 0xa2, 0x29, 0xdd, 0xc1, 0x8d, 0xad, 0xca, 0x11, 0x77, 0x7, 0xb3, 0xb9, 0xcc, 0xc3, 0xea, 0x1e, 0x3c, 0x54, 0xf, 0xb5, 0xa8, 0x7c, 0x88, 0x18, 0xa3, 0xcd, 0xb4, 0xf1, 0x21, 0xa2, 0x8b, 0x76, 0x93, 0x3a, 0x87, 0x4a, 0xda, 0x3b, 0x8d, 0xe3, 0x1e, 0x3a, 0x19, 0xef, 0x70, 0x4e, 0x72, 0xe9, 0x43, 0x47, 0x1f, 0x11, 0x41, 0x71, 0xf, 0x63, 0x53, 0x79, 0x18, 0xd7, 0xd, 0x72, 0x30, 0x61, 0x61, 0x16, 0x47, 0x9, 0x25, 0x58, 0x19, 0x5, 0x2a, 0x30, 0x9a, 0xf4, 0xae, 0x69, 0x3d, 0x39, 0xa8, 0xe0, 0x55, 0x1b, 0x5b, 0xdc, 0x60, 0x80, 0x57, 0x6d, 0xea, 0x55, 0x8c, 0xd, 0x7e, 0xb8, 0xa5, 0xc7, 0x53, 0x2e, 0xf8, 0x21, 0x61, 0x9a, 0xc6, 0x78, 0x60, 0x9d, 0xb0, 0xa5, 0x72, 0xe3, 0x83, 0x71, 0x4e, 0xdc, 0xd1, 0x44, 0x0, 0xf6, 0x18, 0x48, 0x47, 0x5, 0xe7, 0x6, 0x63, 0xe1, 0x16, 0xb6, 0x9b, 0x6f, 0x7c, 0x95, 0x32, 0x57, 0x19, 0x41, 0x70, 0x51, 0xac, 0x5c, 0x67, 0x4, 0xd1, 0x7b, 0xb2, 0x72, 0x95, 0x11, 0xa6, 0xe0, 0xc1, 0x4a, 0x75, 0x46, 0x98, 0xa3, 0x7, 0x2b, 0x46, 0x1d, 0x51, 0x8e, 0x16, 0x22, 0x14, 0xa5, 0x84, 0x29, 0xa8, 0x8b, 0x70, 0xdc, 0x14, 0x78, 0x27, 0x6e, 0x62, 0x4d, 0x9d, 0xaf, 0x95, 0x5a, 0x86, 0x34, 0x63, 0x3e, 0x37, 0x6a, 0xe9, 0xb6, 0xe, 0x0, 0x0, 0xe0, 0x1,
};

const int8_t Vo_Gas[] PROGMEM = {
  0x0, 0xd, 0x4f, 0x4e, 0x33, 0x52, 0xe3, 0x1c, 0x32, 0xbb, 0xc8, 0x2c, 0x4a, 0x7a, 0x88, 0xec, 0xa3, 0x32, 0x28, 0xcd, 0x21, 0x62, 0xf0, 0x4a, 0xe5, 0xc6, 0x83, 0xb4, 0xc1, 0x2a, 0xd9, 0xe6, 0x18, 0x3a, 0x3a, 0x73, 0x37, 0x4b, 0xa2, 0x88, 0x62, 0x4a, 0x15, 0x24, 0x2c, 0x20, 0xa0, 0x85, 0xca, 0x42, 0x4, 0xe9, 0xd9, 0x65, 0x49, 0xf, 0x19, 0xa4, 0x75, 0xae, 0xa6, 0x1b, 0xac, 0x97, 0xde, 0x59, 0x9c, 0x34, 0x8, 0xc1, 0x52, 0x7b, 0x5a, 0xd2, 0x45, 0x45, 0xa9, 0x95, 0x2d, 0x71, 0xf, 0x95, 0x4c, 0xb4, 0x27, 0xc7, 0x39, 0x54, 0x76, 0x51, 0x96, 0xec, 0xf4, 0x90, 0x39, 0x44, 0x79, 0x62, 0xda, 0x4b, 0x1e, 0x32, 0x86, 0x48, 0xb, 0x6a, 0x1c, 0xe8, 0xa8, 0x3d, 0xbc, 0x24, 0x9, 0x2, 0x5a, 0xe5, 0x52, 0x40, 0xcb, 0x16, 0x47, 0x2d, 0x2e, 0x54, 0x54, 0x64, 0x1f, 0x3d, 0x5a, 0x33, 0x55, 0x4b, 0x76, 0xc, 0x1f, 0xd4, 0x55, 0xa4, 0xe9, 0x30, 0x71, 0xd2, 0xa, 0xd3, 0x36, 0xc9, 0x0, 0xbb, 0x3a, 0x9d, 0xea, 0x26, 0xd, 0xcc, 0xee, 0x30, 0x9c, 0x1c, 0x54, 0xf0, 0x3a, 0x55, 0x65, 0x8c, 0x30, 0xc1, 0xaf, 0x54, 0xb5, 0xca, 0xce, 0x4e, 0xc2, 0xcd, 0x24, 0x12, 0x27, 0x2e, 0x30, 0xef, 0x4e, 0x4e, 0x7a, 0x98, 0x44, 0xb5, 0xba, 0x39, 0xe9, 0xa1, 0x33, 0x95, 0xda, 0xe1, 0x74, 0x87, 0x89, 0x54, 0x7b, 0x4a, 0x92, 0x25, 0x81, 0xd9, 0x9e, 0x30, 0x69, 0xe2, 0xd4, 0xa0, 0x3d, 0xc2, 0x3c, 0x4a, 0xe1, 0x3, 0xb3, 0xaa, 0xe4, 0x38, 0x8b, 0xd7, 0xa6, 0xd6, 0x84, 0xe2, 0x1e, 0xd1, 0x9b, 0xb8, 0x74, 0x92, 0x7c, 0x44, 0xef, 0x63, 0xab, 0xd9, 0xf6, 0x11, 0xa2, 0xf3, 0x8a, 0x62, 0x27, 0x87, 0x8f, 0x29, 0x32, 0x93, 0x55, 0x1f, 0x36, 0xa6, 0x88, 0x2c, 0x72, 0x7a, 0x18, 0x97, 0x22, 0x2a, 0x30, 0x69, 0xe2, 0x54, 0x8e, 0x8, 0xa7, 0xa8, 0x88, 0xf5, 0x19, 0xad, 0x4b, 0xd, 0x1, 0x8, 0xc5, 0x2a, 0xf7, 0x87, 0x8f, 0x12, 0x24, 0xf0, 0xa2, 0x94, 0xb5, 0x4e, 0x50, 0xc0, 0xab, 0x56, 0xb3, 0x30, 0x4e, 0x7, 0xbf, 0x42, 0x23, 0xc2, 0x1a, 0xb, 0x7c, 0xb3, 0x4c, 0x4b, 0x62, 0x1c, 0xf0, 0x43, 0xd2, 0x34, 0xb5, 0x73, 0xc1, 0x3c, 0xe6, 0x8, 0x67, 0xc6, 0x3, 0xfd, 0x1c, 0xac, 0xed, 0x1b, 0x1f, 0x8c, 0x73, 0x90, 0x8e, 0x46, 0x22, 0xb0, 0xcf, 0x50, 0x3c, 0x1e, 0x4, 0xdb, 0xd8, 0x8, 0x37, 0xf, 0xdd, 0x7c, 0xeb, 0xa3, 0x44, 0xb8, 0xea, 0xf0, 0xa3, 0xf5, 0x12, 0xa5, 0x2a, 0x2b, 0x48, 0xde, 0x93, 0x95, 0xaa, 0xec, 0x60, 0x85, 0x39, 0x78, 0x8a, 0x50, 0x9c, 0x1d, 0xce, 0xa8, 0x84, 0xc9, 0xab, 0x89, 0x70, 0x9c, 0x10, 0x6, 0xab, 0x66, 0x2c, 0xcd, 0x8c, 0xef, 0x2d, 0xb9, 0x8b, 0xb5, 0x45, 0x56, 0x72, 0x2a, 0xc1, 0x14, 0x19, 0x0, 0x0, 0x0, 0x1e,
};

const int8_t Vo_Impulse[] PROGMEM = { 
  0xa0, 0xe8, 0x22, 0x9b, 0x8d, 0xcb, 0x29, 0x2, 0x1a, 0x33, 0x2d, 0x64, 0xe2, 0x9a, 0xdb, 0xea, 0x64, 0xe0, 0xca, 0xd5, 0x58, 0xea, 0xd2, 0x86, 0x8b, 0x34, 0x69, 0x65, 0xf5, 0xb, 0xce, 0xfa, 0xa6, 0xb7, 0xcc, 0xf, 0x24, 0xf9, 0xa5, 0x36, 0x3a, 0xb7, 0xd0, 0x81, 0x75, 0x6b, 0x64, 0xe3, 0x83, 0x47, 0x6e, 0x33, 0xab, 0x75, 0xf, 0x91, 0xb4, 0x47, 0x94, 0xc4, 0x3d, 0x44, 0xa, 0xe6, 0x31, 0xe4, 0xf4, 0x90, 0xc1, 0xa9, 0xc7, 0x52, 0xba, 0xc0, 0xe0, 0x15, 0x15, 0xa5, 0x4d, 0x1b, 0xeb, 0x59, 0x57, 0x78, 0x24, 0x3d, 0x44, 0x20, 0xb1, 0x57, 0xd2, 0xee, 0x10, 0x99, 0xc8, 0x7c, 0x59, 0xf2, 0x83, 0x57, 0x22, 0xbb, 0xe9, 0xe9, 0xe, 0x51, 0x8, 0xef, 0xb6, 0xa6, 0x2f, 0x54, 0x22, 0x3a, 0x9d, 0x9a, 0xc, 0x1, 0x25, 0x68, 0x28, 0xa0, 0x79, 0xf3, 0xa3, 0x16, 0xaf, 0x6a, 0x22, 0x76, 0x8f, 0x1e, 0x82, 0xa9, 0x8a, 0xa6, 0x3d, 0xa6, 0x8d, 0xea, 0xaa, 0xb2, 0xa4, 0x59, 0xa0, 0x7b, 0xa5, 0x6b, 0xd3, 0x64, 0x82, 0xdd, 0x15, 0x4e, 0x75, 0x82, 0x6, 0x7e, 0xa7, 0xaa, 0x4c, 0x71, 0x6, 0x58, 0x55, 0x91, 0x11, 0x27, 0x70, 0x85, 0x69, 0x54, 0x62, 0xea, 0x45, 0x7, 0x6e, 0xb3, 0x25, 0x4d, 0xe, 0x15, 0x98, 0x4f, 0x8f, 0xd4, 0x2b, 0x1c, 0xb7, 0xdd, 0xe1, 0xd2, 0x24, 0x70, 0xda, 0x45, 0x58, 0x54, 0x9d, 0x43, 0x46, 0x66, 0x33, 0xad, 0xcd, 0xf, 0x55, 0x38, 0xd5, 0x94, 0x34, 0x3b, 0x54, 0x11, 0x5c, 0x15, 0x1c, 0xe7, 0xd0, 0xc9, 0x44, 0x47, 0x71, 0xe2, 0xc3, 0xa4, 0x10, 0xe9, 0xc5, 0x4e, 0xe, 0x9b, 0x62, 0x44, 0x14, 0x25, 0x3d, 0x8c, 0x8f, 0x11, 0x19, 0x54, 0x27, 0x9, 0x32, 0x45, 0xa4, 0x61, 0x55, 0xc4, 0x7, 0x6b, 0x9a, 0x49, 0x93, 0x1, 0x89, 0xc9, 0x85, 0xc, 0xec, 0x70, 0x27, 0x81, 0x53, 0xd1, 0x5c, 0x16, 0x83, 0x2, 0x5e, 0xb5, 0x8a, 0x56, 0xd, 0x3a, 0xf8, 0x55, 0x66, 0x11, 0xd6, 0x59, 0xe0, 0xbb, 0x7b, 0x5a, 0x52, 0xe3, 0x80, 0x1f, 0x12, 0x6e, 0x69, 0x9c, 0xb, 0xe6, 0x9, 0x79, 0x3a, 0x33, 0x1e, 0xe8, 0xe7, 0x28, 0x6d, 0x4f, 0xf9, 0x60, 0xad, 0x21, 0x4d, 0x35, 0xe4, 0x83, 0x79, 0x21, 0x6a, 0x56, 0x95, 0x13, 0x6c, 0x98, 0x86, 0xc7, 0x2e, 0x9e, 0x8a, 0x55, 0xc2, 0x52, 0x65, 0xf8, 0xc1, 0x45, 0xb1, 0x72, 0x95, 0x15, 0x44, 0xef, 0xc9, 0xca, 0xb1, 0x57, 0x90, 0xa2, 0x25, 0x2b, 0xc7, 0x59, 0x61, 0x4a, 0x1e, 0x22, 0x14, 0x67, 0x44, 0x39, 0x78, 0x88, 0x52, 0x94, 0x16, 0xa6, 0xa0, 0x2e, 0xc2, 0x51, 0x53, 0x10, 0x9c, 0x98, 0x8a, 0xd6, 0xd, 0xbe, 0xd4, 0xea, 0xe9, 0xda, 0x4e, 0xf9, 0xd2, 0xa8, 0xa6, 0xd9, 0x32, 0x0, 0x0, 0x0, 0x78, 
};

const int8_t Vo_Helmet[] PROGMEM {
  0xce, 0x88, 0x36, 0x8c, 0x9d, 0x93, 0x1e, 0xab, 0x6, 0xf, 0x71, 0x8c, 0x73, 0xac, 0x6a, 0x2d, 0xcc, 0x30, 0xce, 0xb1, 0x82, 0xd6, 0xc, 0xa1, 0xba, 0xc5, 0x2, 0xa5, 0x26, 0x58, 0xea, 0x6, 0x3, 0xec, 0x69, 0x17, 0x9a, 0x1c, 0x34, 0xf0, 0x2b, 0xc4, 0xb4, 0xaa, 0x33, 0x40, 0xaf, 0x8a, 0x8c, 0x28, 0x83, 0xf3, 0x3a, 0xaa, 0x92, 0x9c, 0x1c, 0x36, 0xb8, 0xa8, 0x6e, 0xb2, 0x7d, 0x98, 0xe8, 0x2b, 0xaa, 0x29, 0xce, 0x61, 0x7d, 0xc, 0xaf, 0xc4, 0x3a, 0x8d, 0x21, 0xad, 0xab, 0x52, 0xe2, 0x17, 0x9a, 0x8c, 0xa9, 0x4c, 0xa9, 0x57, 0x68, 0x32, 0x3a, 0xb3, 0xac, 0x5a, 0xa3, 0xe9, 0x8, 0xf3, 0xf1, 0xba, 0x83, 0xf2, 0x53, 0xd8, 0x5a, 0xeb, 0x2d, 0x32, 0x2c, 0x65, 0x1b, 0x49, 0x76, 0xc8, 0xd8, 0x54, 0xb3, 0xd9, 0xe9, 0x21, 0x62, 0x50, 0xcf, 0xa2, 0xc4, 0x8d, 0xd6, 0x3e, 0xa2, 0x4a, 0x9a, 0x30, 0x2a, 0x1a, 0x77, 0x77, 0x4f, 0xea, 0xa2, 0x66, 0x2c, 0x4c, 0x4c, 0xb1, 0x0, 0x8a, 0xab, 0x50, 0x40, 0xb3, 0x1d, 0x7, 0x8b, 0xd9, 0x5d, 0x2d, 0xe3, 0x1c, 0x2c, 0x16, 0xf, 0x73, 0xad, 0xbd, 0x70, 0x13, 0x23, 0x3c, 0xac, 0xa9, 0x22, 0xe9, 0x9a, 0x76, 0xb7, 0x24, 0x89, 0x2a, 0xc2, 0xc2, 0xcb, 0x93, 0x1c, 0xcc, 0xcb, 0xb8, 0x69, 0x4d, 0x7b, 0x70, 0xaf, 0xa3, 0x7c, 0xcc, 0xc9, 0xc1, 0x43, 0x55, 0xcd, 0x16, 0xa7, 0xb, 0x8f, 0x5b, 0x25, 0xc6, 0x2c, 0xf, 0xdc, 0xd5, 0x32, 0x33, 0x73, 0xd6, 0x70, 0x5d, 0xda, 0xdc, 0x2c, 0x59, 0x21, 0x78, 0x1d, 0x8b, 0xf0, 0x66, 0x8a, 0xc2, 0xaf, 0x3c, 0xc3, 0xeb, 0x8, 0x20, 0x7, 0x95, 0x25, 0x95, 0x50, 0x66, 0x46, 0x76, 0x8f, 0x52, 0x5d, 0x18, 0x1b, 0x27, 0x3d, 0x6a, 0x8c, 0xee, 0xec, 0x52, 0xe7, 0x68, 0x31, 0x58, 0xa9, 0x72, 0x9d, 0xa5, 0x79, 0xe7, 0x19, 0xce, 0x89, 0x8f, 0x94, 0xbc, 0x75, 0x4, 0xc5, 0x39, 0x42, 0xe, 0x5e, 0x11, 0x14, 0xfb, 0xf0, 0x29, 0x58, 0x86, 0x72, 0x9c, 0xc1, 0x8b, 0xa8, 0x99, 0xa1, 0x4d, 0x3, 0xf, 0x9f, 0xb7, 0x9b, 0x24, 0x73, 0x3c, 0xf8, 0x11, 0x66, 0x56, 0xcf, 0x89, 0xe0, 0x87, 0x7b, 0x4a, 0x32, 0x23, 0x83, 0x6f, 0x11, 0x6e, 0x76, 0x9c, 0x6, 0xfe, 0xb8, 0x85, 0xab, 0xe, 0x16, 0xe8, 0x17, 0x22, 0x6d, 0xcf, 0xb9, 0x60, 0x9c, 0xa2, 0x67, 0x32, 0xe5, 0x81, 0xbe, 0xe, 0xd6, 0xf6, 0x90, 0xf, 0xde, 0x1a, 0x6a, 0xd6, 0x45, 0x1e, 0x36, 0x11, 0x11, 0x19, 0x27, 0x39, 0xd2, 0x57, 0x99, 0x68, 0xe8, 0xe6, 0xbb, 0x10, 0xc5, 0xc2, 0x55, 0x46, 0x10, 0x9d, 0x27, 0x2b, 0xd7, 0x99, 0xc1, 0x8, 0x92, 0xf7, 0x60, 0xa5, 0x28, 0x23, 0xcc, 0xd1, 0x83, 0x85, 0xa2, 0xce, 0xb0, 0x45, 0x39, 0x68, 0x8, 0x73, 0x9c, 0x12, 0xc6, 0xa0, 0x2e, 0x22, 0x71, 0x43, 0x60, 0xac, 0xa9, 0xaa, 0x35, 0x35, 0xbe, 0xd6, 0x62, 0xa5, 0xb2, 0xc, 0x79, 0xc1, 0xb2, 0x5, 0x59, 0x3b, 0x0, 0x0, 0x0, 0x78, 
};

Talkie voice;
 

SoftwareSerial BTSerial(10,11);

byte buffer[1024];
int bufferPosition;

const int MPU_addr=0x68;  // I2C address of the MPU-6050
int16_t AcX,AcY,AcZ;
int red = 7;
int green = 12;
int blue = 13;
 long acx = abs(AcX);
  long acy = abs(AcY);
  long acz = abs(AcZ);
  long impulse = acx + acy + acz;
void setup(){ 
  
  delay(3000);
  Serial.begin(9600);
  bufferPosition = 0;
  BTSerial.begin(9600);
  pinMode(red, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(blue, OUTPUT);
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
}

void loop(){
  int gas = analogRead(A1);;
  int light = analogRead(A0);
  int touch = digitalRead(5);

 if(light > 700) {
  analogWrite(red, 255);
  analogWrite(green, 255);
  analogWrite(blue, 255);
  }

  if(light <= 700) {
  analogWrite(red, 0);
  analogWrite(green, 0);
  analogWrite(blue, 0);
  }
   if(gas > 600) {

  }
   
 
  

//  if(BTSerial.available()) {
//    if(BTSerial.read() == '1') {
//      analogWrite(red, 255);
//    }
//  }

  
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
  AcX = Wire.read()<<8|Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)    
  AcY = Wire.read()<<8|Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ = Wire.read()<<8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  long acx = abs(AcX);
  long acy = abs(AcY);
  long acz = abs(AcZ);
  long impulse = acx + acy + acz;

  Serial.print("AcX = "); Serial.print(acx);
  Serial.print(" | AcY = "); Serial.print(acy);
  Serial.print(" | AcZ = "); Serial.println(acz);
  Serial.print("light = ");
  Serial.println(light);
  Serial.print("gas = ");
  Serial.println(gas);
  Serial.print("touch = ");
  Serial.println(touch);
  Serial.print("impulse = ");
  Serial.println(impulse);
  

  BTSerial.print(light);
  BTSerial.print(",");
  BTSerial.print(gas);
  BTSerial.print(",");
  BTSerial.print(1);
  BTSerial.print(",");
  BTSerial.print(impulse);
  BTSerial.print(",");
  BTSerial.println();

  if(impulse > 35000) {
  }

  
int text = BTSerial.read();
  switch(text)
  {
    case 'A':
    voice.say(Vo_Call);
    break;
    
    case 'B':
    voice.say(Vo_Helmet);
    break;
  }
  
  Serial.println();
 delay(3000);
}
